import PushNotification from 'react-native-push-notification';
import PushNotificationIOS from "@react-native-community/push-notification-ios";
import { Platform } from 'react-native';

class LocalNotificationService {

    configure = (onOpenNotification) => {
        PushNotification.configure({

            onRegister: function (token) {
                console.log("TOKEN:", token);
            },

            onNotification: function (notification) {
                // console.log("NOTIFICATION:", notification);

                notification.userInteraction = true;
                onOpenNotification(Platform.OS === 'ios' ? notification.data.item : notification.data);

                if (Platform.OS === 'ios') {
                    notification.finish(PushNotificationIOS.FetchResult.NoData);
                }

            },

            // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
            onAction: function (notification) {
                console.log("ACTION:", notification.action);
                console.log("NOTIFICATION:", notification);

                // process the action
            },

            // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
            onRegistrationError: function (err) {
                console.error(err.message, err);
            },

            // IOS ONLY (optional): default: all - Permissions to register.
            permissions: {
                alert: true,
                badge: true,
                sound: true,
            },

            // Should the initial notification be popped automatically
            // default: true
            popInitialNotification: true,

            /**
             * (optional) default: true
             * - Specified if permissions (ios) and token (android and ios) will requested or not,
             * - if not, you must call PushNotificationsHandler.requestPermissions() later
             * - if you are not using remote notification or do not have Firebase installed, use this:
             *     requestPermissions: Platform.OS === 'ios'
             */
            requestPermissions: Platform.OS === 'ios',
        });
    }

    unregister = () => {
        PushNotification.unregister();
    }

    showNotification = (id, title, message, data = {}, options = {}) => {
        console.log(title);
        console.log(title);
        PushNotification.localNotification({

            //...this.buildAndroidNotification(id, title, message, data, options),
            //...this.buildIOSNotification(id, title, message, data, options),

            /* Android Only Properties */
            // id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            // ticker: "My Notification Ticker", // (optional)
            // showWhen: true, // (optional) default: true
            // autoCancel: true, // (optional) default: true
            largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
            // largeIconUrl: "https://www.example.tld/picture.jpg", // (optional) default: undefined
            smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
            // bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
            // subText: "This is a subText", // (optional) default: none
            // bigPictureUrl: "https://www.example.tld/picture.jpg", // (optional) default: undefined
            // color: "red", // (optional) default: system default
            // vibrate: true, // (optional) default: true
            // vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            // tag: "some_tag", // (optional) add tag to message
            // group: "group", // (optional) add group to message
            // groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
            // ongoing: false, // (optional) set whether this is an "ongoing" notification
            // priority: "high", // (optional) set notification priority, default: high
            // visibility: "private", // (optional) set notification visibility, default: private
            // importance: "high", // (optional) set notification importance, default: high
            // allowWhileIdle: false, // (optional) set notification to work while on doze, default: false
            // ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear)
            // shortcutId: "shortcut-id", // (optional) If this notification is duplicative of a Launcher shortcut, sets the id of the shortcut, in case the Launcher wants to hide the shortcut, default undefined
            // channelId: "your-custom-channel-id", // (optional) custom channelId, if the channel doesn't exist, it will be created with options passed above (importance, vibration, sound). Once the channel is created, the channel will not be update. Make sure your channelId is different if you change these options. If you have created a custom channel, it will apply options of the channel.

            // actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
            // invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

            // /* iOS only properties */
            // alertAction: "view", // (optional) default: view
            // category: "", // (optional) default: empty string
            // userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)

            /* iOS and Android properties */
            title: title || '',//"My Notification Title", // (optional)
            message: message || '',//"My Notification Message", // (required)
            playSound: false, // (optional) default: true
            soundName: "default", // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
            // number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            // repeatType: "day", // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        });
    }

    cancelAllLocalNotifications = () => {
        if (Platform.OS === 'ios') {
            PushNotificationIOS.removeAllDeliveredNotifications();
        } else {
            PushNotification.cancelAllLocalNotifications();
        }
    }


    removeDeliveredNotificationByID = (notificationId) => {
        console.log('notificationId => ', notificationId);
        PushNotification.cancelLocalNotifications({ id: notificationId });
    }

}


export const localNotificationService = new LocalNotificationService();